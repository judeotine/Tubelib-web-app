"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   corsFetch: function() { return /* binding */ corsFetch; },\n/* harmony export */   corsProxy: function() { return /* binding */ corsProxy; },\n/* harmony export */   createYoutubeApiOptions: function() { return /* binding */ createYoutubeApiOptions; },\n/* harmony export */   extractVideoId: function() { return /* binding */ extractVideoId; },\n/* harmony export */   generateThumbnailUrl: function() { return /* binding */ generateThumbnailUrl; },\n/* harmony export */   handleFetchError: function() { return /* binding */ handleFetchError; },\n/* harmony export */   isYoutubeUrl: function() { return /* binding */ isYoutubeUrl; },\n/* harmony export */   validateResponse: function() { return /* binding */ validateResponse; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n// Constants for API endpoints and configuration\nconst CORS_PROXY = \"https://proxy.corsfix.com/\";\nconst YOUTUBE_API_BASE = \"https://www.youtube.com/youtubei/v1\";\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000;\n/**\n * Enhanced CORS proxy function with error handling and validation\n */ function corsProxy(url) {\n    try {\n        const encodedUrl = encodeURIComponent(url);\n        return \"\".concat(CORS_PROXY, \"?\").concat(encodedUrl);\n    } catch (error) {\n        console.error(\"Error encoding URL:\", error);\n        throw new Error(\"Invalid URL for CORS proxy\");\n    }\n}\n/**\n * Enhanced fetch function with retry logic and better error handling\n */ async function corsFetch(url, init) {\n    const { retries = MAX_RETRIES, retryDelay = RETRY_DELAY, ...fetchInit } = init || {};\n    let lastError;\n    for(let attempt = 0; attempt < retries; attempt++){\n        try {\n            const proxiedUrl = url.startsWith(\"http\") ? corsProxy(url) : url;\n            const controller = new AbortController();\n            const timeout = setTimeout(()=>controller.abort(), 30000); // 30s timeout\n            const response = await fetch(proxiedUrl, {\n                ...fetchInit,\n                signal: controller.signal,\n                headers: {\n                    ...fetchInit === null || fetchInit === void 0 ? void 0 : fetchInit.headers,\n                    Accept: \"application/json, text/plain, */*\",\n                    \"Accept-Language\": \"en-US,en;q=0.9\"\n                }\n            });\n            clearTimeout(timeout);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return response;\n        } catch (error) {\n            console.error(\"Attempt \".concat(attempt + 1, \" failed:\"), error);\n            lastError = error;\n            if (error instanceof Error && error.name === \"AbortError\") {\n                throw new Error(\"Request timed out\");\n            }\n            if (attempt < retries - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n            }\n        }\n    }\n    throw lastError;\n}\n/**\n * Enhanced video ID extractor with validation\n */ function extractVideoId(url) {\n    if (!url) return null;\n    try {\n        const regex = /(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n        const match = url.match(regex);\n        if (!match) return null;\n        const videoId = match[1];\n        if (!videoId || videoId.length !== 11) return null;\n        return videoId;\n    } catch (error) {\n        console.error(\"Error extracting video ID:\", error);\n        return null;\n    }\n}\n/**\n * Enhanced thumbnail URL generator with quality options\n */ function generateThumbnailUrl(videoId) {\n    let quality = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"mqdefault\";\n    if (!videoId) return \"\";\n    try {\n        return \"https://img.youtube.com/vi/\".concat(videoId, \"/\").concat(quality, \".jpg\");\n    } catch (error) {\n        console.error(\"Error generating thumbnail URL:\", error);\n        return \"\";\n    }\n}\n/**\n * Enhanced YouTube URL validator\n */ function isYoutubeUrl(url) {\n    if (!url) return false;\n    try {\n        const regex = /^https?:\\/\\/(?:www\\.)?youtu(?:be\\.com\\/watch\\?v=|\\.be\\/)([\\w\\-\\_]*)(&(amp;)?‌​[\\w\\?‌​=]*)?/;\n        return regex.test(url);\n    } catch (error) {\n        console.error(\"Error validating YouTube URL:\", error);\n        return false;\n    }\n}\n/**\n * Helper function to handle fetch errors\n */ async function handleFetchError(response) {\n    let errorMessage;\n    try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || \"HTTP error! status: \".concat(response.status);\n    } catch (e) {\n        errorMessage = \"HTTP error! status: \".concat(response.status);\n    }\n    throw new Error(errorMessage);\n}\n/**\n * Helper function to validate response data\n */ function validateResponse(data) {\n    if (!data) {\n        throw new Error(\"Invalid response data\");\n    }\n    return data;\n}\n/**\n * Helper function to create YouTube API request options\n */ function createYoutubeApiOptions(body) {\n    return {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-YouTube-Client-Name\": \"3\",\n            \"X-YouTube-Client-Version\": \"18.11.34\",\n            \"x-corsfix-headers\": JSON.stringify({\n                \"user-agent\": \"com.google.android.youtube/18.11.34 (Linux; U; Android 11) gzip\",\n                origin: \"https://www.youtube.com\"\n            })\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzFELEVBQUUsT0FBT3BDLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLG1DQUFtQ0E7UUFDakQsT0FBTztJQUNUO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLFNBQVNxQyxhQUFheEMsR0FBVztJQUN0QyxJQUFJLENBQUNBLEtBQUssT0FBTztJQUVqQixJQUFJO1FBQ0YsTUFBTWtDLFFBQ0o7UUFDRixPQUFPQSxNQUFNTyxJQUFJLENBQUN6QztJQUNwQixFQUFFLE9BQU9HLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBTztJQUNUO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLGVBQWV1QyxpQkFBaUJ0QixRQUFrQjtJQUN2RCxJQUFJdUI7SUFFSixJQUFJO1FBQ0YsTUFBTUMsWUFBWSxNQUFNeEIsU0FBU3lCLElBQUk7UUFDckNGLGVBQWVDLFVBQVV6QyxLQUFLLElBQUksdUJBQXVDLE9BQWhCaUIsU0FBU08sTUFBTTtJQUMxRSxFQUFFLFVBQU07UUFDTmdCLGVBQWUsdUJBQXVDLE9BQWhCdkIsU0FBU08sTUFBTTtJQUN2RDtJQUVBLE1BQU0sSUFBSXRCLE1BQU1zQztBQUNsQjtBQUVBOztDQUVDLEdBQ00sU0FBU0csaUJBQW9CQyxJQUFjO0lBQ2hELElBQUksQ0FBQ0EsTUFBTTtRQUNULE1BQU0sSUFBSTFDLE1BQU07SUFDbEI7SUFDQSxPQUFPMEM7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU0Msd0JBQXdCQyxJQUFZO0lBQ2xELE9BQU87UUFDTEMsUUFBUTtRQUNSRCxNQUFNRSxLQUFLQyxTQUFTLENBQUNIO1FBQ3JCMUIsU0FBUztZQUNQLGdCQUFnQjtZQUNoQix5QkFBeUI7WUFDekIsNEJBQTRCO1lBQzVCLHFCQUFxQjRCLEtBQUtDLFNBQVMsQ0FBQztnQkFDbEMsY0FDRTtnQkFDRkMsUUFBUTtZQUNWO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi91dGlscy50cz9mNzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsc3gsIHR5cGUgQ2xhc3NWYWx1ZSB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyB0d01lcmdlIH0gZnJvbSBcInRhaWx3aW5kLW1lcmdlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbiguLi5pbnB1dHM6IENsYXNzVmFsdWVbXSkge1xuICByZXR1cm4gdHdNZXJnZShjbHN4KGlucHV0cykpO1xufVxuXG4vLyBDb25zdGFudHMgZm9yIEFQSSBlbmRwb2ludHMgYW5kIGNvbmZpZ3VyYXRpb25cbmNvbnN0IENPUlNfUFJPWFkgPSBcImh0dHBzOi8vcHJveHkuY29yc2ZpeC5jb20vXCI7XG5jb25zdCBZT1VUVUJFX0FQSV9CQVNFID0gXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS95b3V0dWJlaS92MVwiO1xuY29uc3QgTUFYX1JFVFJJRVMgPSAzO1xuY29uc3QgUkVUUllfREVMQVkgPSAxMDAwO1xuXG4vKipcbiAqIEVuaGFuY2VkIENPUlMgcHJveHkgZnVuY3Rpb24gd2l0aCBlcnJvciBoYW5kbGluZyBhbmQgdmFsaWRhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY29yc1Byb3h5KHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBlbmNvZGVkVXJsID0gZW5jb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gICAgcmV0dXJuIGAke0NPUlNfUFJPWFl9PyR7ZW5jb2RlZFVybH1gO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbmNvZGluZyBVUkw6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFVSTCBmb3IgQ09SUyBwcm94eVwiKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuaGFuY2VkIGZldGNoIGZ1bmN0aW9uIHdpdGggcmV0cnkgbG9naWMgYW5kIGJldHRlciBlcnJvciBoYW5kbGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29yc0ZldGNoKFxuICB1cmw6IHN0cmluZyxcbiAgaW5pdD86IFJlcXVlc3RJbml0ICYge1xuICAgIHJldHJpZXM/OiBudW1iZXI7XG4gICAgcmV0cnlEZWxheT86IG51bWJlcjtcbiAgfSxcbik6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgY29uc3Qge1xuICAgIHJldHJpZXMgPSBNQVhfUkVUUklFUyxcbiAgICByZXRyeURlbGF5ID0gUkVUUllfREVMQVksXG4gICAgLi4uZmV0Y2hJbml0XG4gIH0gPSBpbml0IHx8IHt9O1xuXG4gIGxldCBsYXN0RXJyb3I6IEVycm9yO1xuXG4gIGZvciAobGV0IGF0dGVtcHQgPSAwOyBhdHRlbXB0IDwgcmV0cmllczsgYXR0ZW1wdCsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb3hpZWRVcmwgPSB1cmwuc3RhcnRzV2l0aChcImh0dHBcIikgPyBjb3JzUHJveHkodXJsKSA6IHVybDtcblxuICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgMzAwMDApOyAvLyAzMHMgdGltZW91dFxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHByb3hpZWRVcmwsIHtcbiAgICAgICAgLi4uZmV0Y2hJbml0LFxuICAgICAgICBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgLi4uZmV0Y2hJbml0Py5oZWFkZXJzLFxuICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLypcIixcbiAgICAgICAgICBcIkFjY2VwdC1MYW5ndWFnZVwiOiBcImVuLVVTLGVuO3E9MC45XCIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBBdHRlbXB0ICR7YXR0ZW1wdCArIDF9IGZhaWxlZDpgLCBlcnJvcik7XG4gICAgICBsYXN0RXJyb3IgPSBlcnJvciBhcyBFcnJvcjtcblxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdCB0aW1lZCBvdXRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRlbXB0IDwgcmV0cmllcyAtIDEpIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+XG4gICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCByZXRyeURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCkpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRocm93IGxhc3RFcnJvciE7XG59XG5cbi8qKlxuICogRW5oYW5jZWQgdmlkZW8gSUQgZXh0cmFjdG9yIHdpdGggdmFsaWRhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZpZGVvSWQodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKCF1cmwpIHJldHVybiBudWxsO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVnZXggPVxuICAgICAgLyg/OnlvdXR1YmVcXC5jb21cXC8oPzpbXlxcL1xcblxcc10rXFwvXFxTK1xcL3woPzp2fGUoPzptYmVkKT8pXFwvfFxcUyo/Wz8mXXY9KXx5b3V0dVxcLmJlXFwvKShbYS16QS1aMC05Xy1dezExfSkvO1xuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHJlZ2V4KTtcblxuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgdmlkZW9JZCA9IG1hdGNoWzFdO1xuICAgIGlmICghdmlkZW9JZCB8fCB2aWRlb0lkLmxlbmd0aCAhPT0gMTEpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHZpZGVvSWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGV4dHJhY3RpbmcgdmlkZW8gSUQ6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEVuaGFuY2VkIHRodW1ibmFpbCBVUkwgZ2VuZXJhdG9yIHdpdGggcXVhbGl0eSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRodW1ibmFpbFVybChcbiAgdmlkZW9JZDogc3RyaW5nIHwgbnVsbCxcbiAgcXVhbGl0eTpcbiAgICB8IFwiZGVmYXVsdFwiXG4gICAgfCBcIm1xZGVmYXVsdFwiXG4gICAgfCBcImhxZGVmYXVsdFwiXG4gICAgfCBcInNkZGVmYXVsdFwiXG4gICAgfCBcIm1heHJlc2RlZmF1bHRcIiA9IFwibXFkZWZhdWx0XCIsXG4pOiBzdHJpbmcge1xuICBpZiAoIXZpZGVvSWQpIHJldHVybiBcIlwiO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGBodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS8ke3ZpZGVvSWR9LyR7cXVhbGl0eX0uanBnYDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyB0aHVtYm5haWwgVVJMOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmhhbmNlZCBZb3VUdWJlIFVSTCB2YWxpZGF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzWW91dHViZVVybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAoIXVybCkgcmV0dXJuIGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVnZXggPVxuICAgICAgL15odHRwcz86XFwvXFwvKD86d3d3XFwuKT95b3V0dSg/OmJlXFwuY29tXFwvd2F0Y2hcXD92PXxcXC5iZVxcLykoW1xcd1xcLVxcX10qKSgmKGFtcDspP+KAjOKAi1tcXHdcXD/igIzigIs9XSopPy87XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QodXJsKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdmFsaWRhdGluZyBZb3VUdWJlIFVSTDpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBoYW5kbGUgZmV0Y2ggZXJyb3JzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaEVycm9yKHJlc3BvbnNlOiBSZXNwb25zZSk6IFByb21pc2U8bmV2ZXI+IHtcbiAgbGV0IGVycm9yTWVzc2FnZTogc3RyaW5nO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGVycm9yTWVzc2FnZSA9IGVycm9yRGF0YS5lcnJvciB8fCBgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICB9IGNhdGNoIHtcbiAgICBlcnJvck1lc3NhZ2UgPSBgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIHJlc3BvbnNlIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmVzcG9uc2U8VD4oZGF0YTogVCB8IG51bGwpOiBUIHtcbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZXNwb25zZSBkYXRhXCIpO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgWW91VHViZSBBUEkgcmVxdWVzdCBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVZb3V0dWJlQXBpT3B0aW9ucyhib2R5OiBvYmplY3QpOiBSZXF1ZXN0SW5pdCB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiWC1Zb3VUdWJlLUNsaWVudC1OYW1lXCI6IFwiM1wiLFxuICAgICAgXCJYLVlvdVR1YmUtQ2xpZW50LVZlcnNpb25cIjogXCIxOC4xMS4zNFwiLFxuICAgICAgXCJ4LWNvcnNmaXgtaGVhZGVyc1wiOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFwidXNlci1hZ2VudFwiOlxuICAgICAgICAgIFwiY29tLmdvb2dsZS5hbmRyb2lkLnlvdXR1YmUvMTguMTEuMzQgKExpbnV4OyBVOyBBbmRyb2lkIDExKSBnemlwXCIsXG4gICAgICAgIG9yaWdpbjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbVwiLFxuICAgICAgfSksXG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJjbHN4IiwidHdNZXJnZSIsImNuIiwiaW5wdXRzIiwiQ09SU19QUk9YWSIsIllPVVRVQkVfQVBJX0JBU0UiLCJNQVhfUkVUUklFUyIsIlJFVFJZX0RFTEFZIiwiY29yc1Byb3h5IiwidXJsIiwiZW5jb2RlZFVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiY29yc0ZldGNoIiwiaW5pdCIsInJldHJpZXMiLCJyZXRyeURlbGF5IiwiZmV0Y2hJbml0IiwibGFzdEVycm9yIiwiYXR0ZW1wdCIsInByb3hpZWRVcmwiLCJzdGFydHNXaXRoIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYWJvcnQiLCJyZXNwb25zZSIsImZldGNoIiwic2lnbmFsIiwiaGVhZGVycyIsIkFjY2VwdCIsImNsZWFyVGltZW91dCIsIm9rIiwic3RhdHVzIiwibmFtZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiTWF0aCIsInBvdyIsImV4dHJhY3RWaWRlb0lkIiwicmVnZXgiLCJtYXRjaCIsInZpZGVvSWQiLCJsZW5ndGgiLCJnZW5lcmF0ZVRodW1ibmFpbFVybCIsInF1YWxpdHkiLCJpc1lvdXR1YmVVcmwiLCJ0ZXN0IiwiaGFuZGxlRmV0Y2hFcnJvciIsImVycm9yTWVzc2FnZSIsImVycm9yRGF0YSIsImpzb24iLCJ2YWxpZGF0ZVJlc3BvbnNlIiwiZGF0YSIsImNyZWF0ZVlvdXR1YmVBcGlPcHRpb25zIiwiYm9keSIsIm1ldGhvZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJvcmlnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});